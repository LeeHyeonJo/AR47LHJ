// 016_class2.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

//객체지향적 생각 흐름 (요약: 무조건 클래스 - 내가 만들 개념 - 부터 만들어라)
//1. 첫번쨰로 데이터를 만들 생각: 뭔가 만들고 싶다 > 플레이어를 만든다(클래스를 만든다) :: 이게 제일 기본임 
//2. 그 다음 행동을 정한다: 이 플레이어는 무엇을 할수 있지?
// 피드백 받을 시 일단, 무조건 Data를 만든 후에 받자. 


// 클래스에 대하여  (자료형> 기본자료형(int 부울) > 사용자 정의 자료형 (player,monster.. 등등) = 모든걸 표현할 수 있음) 
class Player
{
    // 클래스 선언 후 생각할 것 - 내부에 들어가는 것  
    // 1) 속성 2)행동
    
    // **속성: 행동은 아니나, 특징을 나타낼 수 있는 개념들 (ex 매력 공격력 등) 
    // ㄴ 클래스 내부에서 해당하는 "변수(멤버변수)"를 선언해 표현할 수 있다. 
    // ㄴ 무슨 속성을 정할지 모르겠으면 그것도 질문하셈. 
    // 꼼수: 만들 것의 이름이 명사로 떠오르면 멤버변수, 동사형으로 떠오르면 함수. 

    const char* const name; // 캐릭터 이름 - 왜 콘스트에 포인터변수인지 찾아보기. 
    int att; // 공격력: 속성 <- 공격할 수 있어 
    int HP; // 체력: 속성 <- 공격받을 수 있어 


    //**행동: 맞을 수 있어야한다, 뛸 수 있어야 한다.. 등을 표현하기 위함. 
    //  ㄴ 절차지향에서도 "함수"로 표현됨. 

    // 달린다
    void run() {

    }

    // 공격한다
    void damage() {

    }

    //스테이터스를 띄워준다
    void statusrender() {

        {
            printf_s("%s 의 스테이터스 ~ \n", name);
            printf_s("%s 의 스테이터스 ~ \n", att);
            printf_s("%s 의 스테이터스 ~ \n", hp);
        }

    }


};
// 즉, C++에서 클래스는 모든것을 만들 수 있는 문법임. 
// int도 다르지 않다는 것을 알수 있게 됨. 

// 이건 내가 직접 만든 자료형(player)이니까, 사용자 정의 자료형에 해당됨. 



int main()
{                    // 개념을 생각하고 (플레이어 만들래) > 그 개념을 클래스로 정의 내리고 (위에) 
    Player NPlayer /*= Player();*/ // N플레이어 = 객체임 

        // Player NPlayer1= Player();
        // Player NPlayer2= Player();
        // Player NPlayer3= Player(); // 3명을 이렇게 표현하거나 (메인에서 캐를 만들고, 그 후 클래스에서 정의한 player을 사용함)

        // Player NPlayer[3]= Player(); // 배열로 표현할 수도 있다. 


    int value /*= int();*/ // 그러므로 int도 기본 클래스에 해당 됨 

        // 따라서 "무언가를 만들지"에 대한 생각은 항상 중요함. 
}

