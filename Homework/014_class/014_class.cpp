// 014_class.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 37번까지가 class 를 제외하고 c++의 기초 문법임 
// 절차지향 & 프로그램 패러다임에 대해 배움.
// 이거 짠 순서: 일단 메인에서 변수 선언 > 대미지 함수에서 hp,공격력, 선언 후 프린트로 단순하게 공격시작 방어시작 출력
// 그 다음 while 과 if문을 사용해 공격>몬스터 피통 감소를 반복하는 걸 구현
// 그 다음에 스테이터스 띄우는 걸 구현함. 
// 즉, 메인에서 변수 선언(데이터 선언): 후 이어지는 행동(플레이어가 몬스터를 공격) 하는걸 구현하는걸 "객체지향"이라고 함.
// 객체지향의 추상화에 대해서 배움~ 
    // 1. 나는 ~를 코드로 표현하고 싶다 => 1가지의 코드만으로 표현이 가능해야 함. 

// 이 코드의 행위에 플레이어가 아니라, 플레이어의 데이터만이 존재한다는 걸 이해할 것. 
// 이 코드에는 데이터와 행동만 존재함을 명심. 

// 과제 끝나고 이 코드 천천히 순서대로 따라가면서 작동되게 해보기. 

#include <iostream>
// #include <coino.n>

//C++은 C를 기반문법으로 삼가 "객체지향"을 추가, 타 언어의 장점까지도 흡수함. 

//C는 단순함. 


// 특정대상이 다른 대상을 떄린다 = 데이터를 변화시켜 목적을 이룬다, 라고 생각하며 함수를 짜야함. 
void damage(
    const char* const _attname, // 때리는 쪽의 이름
    const char* const _defname, // 맞는 쪽의 이름 
    const int& att, // 때리는 놈 공격력
    int& hp) // 맞는 놈 피통 - 공격력은 고정이므로 인스트, 피통은 바뀌므로 안붙임. 

{
    printf_s("%s가 공격시작\n", _attname);
    printf_s("%s가 방어시작\n", _defname);

}



int main()
{
        // 플레이어 피통,공격력, 몬스터 피통, 공격력
        // 글자로 몬스터와 플레이어가 싸우는 게임 -> 플레이어를 먼저 만들어야 함. 
    //씨의 경우: 데이터를 기반으로 시작. 우선 행동을 정의함. (변수 정하고, 치고박고 싸우는 과정을 구현) 

    int ph = 100; 
    int pa = 10; 

    int mh = 100;
    int ma = 10; 
}

while (true) // 이건 단순하게 누구 공격, 누구 맞음 정도만 나오게 함. 
{
    데미지("플레이어", "몬스터", 플레이어 공격력, 몬스터 능력);
    데미지 (하 .. )

// 스테이터스까지 출력되게 하고 싶다면? 
// 인클루드 하나 더 추가한다음에 이하 함수 추가 

void statusrender( // 여기가 화면에 스테이터스 띄우는 함수 
    const char* const _attname, // 때리는 쪽의 이름
    const int& att, // 때리는 놈 공격력
    int& hp // 맞는 놈의 체력 

    // const를 건 이유: 이 함수에 들어온 시점에서 이 값은 바뀌지 않음을 의미. 
)   // system("cls") -  추후설명~ 콘솔 화면의 모든 글자를 지워줌 

    {
     프린트("어쩌구의 스테이터스 ~~", 이름)
     프린트("어쩌구의 공격력", 공격력)
    
    }

    // 데이터 기반으로 선언해주는 이유: 그래야 함수 하나로 다 써먹을 수 잇으니까.
    // 아니라면 그 베이스로 (드래곤전용 스테이터스, 인간전용 스테이터스 출력.. 이렇게 다 해야됨.) 


// 프린트 fs 들어간거 보고 복사하기. 
    // _getch (클릭할때까지 계속 출력해주는 그 .. 그 함수 기억하기!) 