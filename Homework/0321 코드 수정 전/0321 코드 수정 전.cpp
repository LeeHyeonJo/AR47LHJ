// Homework(0321).cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 과제: 플레이어-몬스터 순서대로 공격을 주고받는다. 이때 스테이터스의 변동이 실시간으로 출력되도록 할 것. 
// 기존 코드: 플레이어 공격 - 몬스터 공격이 진행된 후에 변경사항이 출력됨. 
// system("cls"): 콘솔 화면에 있는걸 다 지우는 명령어 <- 이걸 잘 쓰면 됨. 

// 내가 만들거:플레이어-몬스터 순서대로 공격을 주고받는다. 이때 스테이터스의 변동이 실시간으로 출력되도록 할 것. 
// 필요한거: 플레이어,몬스터의 스테이터스 o / 공격을 주고받는 과정&스크립트 함수1개 o / 스테이터스 출력 함수 1개 (이걸 잘 나눠야 함) o
// 일단은 대미지를 추고 받는 행동(함수) 와, 그 결과를 콘솔창에 띄워줄 행동(함수) 
// 클래스를 사용하지 않으니까, 변수는 메인에서 선언하고사용해야겠지. << 알겠지 잊지마라~ 


// 2차례 공격 후 한번에 정산하는 시스템만 구현된 함수. 

#include <iostream>
#include <conio.h> // _getch() 를 사용
#include <stdlib.h> // system("cls") 사용


// 2. 공격을 주고받는 과정&스크립트 함수1개 
// 함수에 들어갈 인자를 선언해줄거임
    // ㄴ단, 어떤 인자가 들어와도 호환가능하게 > 실제 값이 아니라 그 위치를 찾아서, 그 변수를 사용한다는 식으로 선언/포인터 배운 이유 
    // 그리고 그 인자가 바뀌는지, 고정되어야 하는지도 생각해야 함. 
    // 1) 공격하는 쪽의 공격력(고정&정수) 2)공격 받는 쪽의 체력(바뀜&정수) 3) printf_s 로 출력할 공격자/방어자의 "이름" (고정/문자열)  

void damage_print(
    const char* const attname, // 공격하는 캐릭터 이름 
    const char* const defname, // 공격당하는 캐릭터 이름 
    const int& att, //공격자의 공격력
    int& hp   // 공격받는 자의 체력
)
{
    //3. 세번째로는 공격과정을 출력할거임. 
    printf_s("%s의 옆구리 찌르기!\n", attname); // 공격한 스크립트 
    printf_s("%s는 %d의 대미지를 입었다!\n", defname, att);// 대미지 받는 스크립트 
    hp -= att; // hp - att 한 후 그 값을 다시 hp에 대입 
    // 공격을 했으니 실제로 바뀌어야 하는 변수 hp에 변화를 줌.  
}


// 4. 스테이터스를 만들고 출력할거임. 
    // 뭘 만들거지?: 몬스터& 인간의 스테이터스 - 이름 / 공격력 / 체력을 출력할거임
    // 필요한 인자는?: 몬스터의 이름, 공격력, 체력 & 인간의 이름, 공격력, 체력
        // =  공격하는 쪽의 이름, 공격력 & 맞을 때의 체력 (이렇게 머릿속으로 착착 정리가 잘 되어야 하는게 중요) 

void status_print(
    const char* const attname, //공격자의 이름 
    const int& att, // 공격자의 공격력
    int& hp // 공격당할때 체력
)
{
    printf_s("*--*--*--*--*--*--*--*--*--*\n");
    printf_s("『%s의 스테이터스』\n", attname); // 플레이어, 또는 몬스터 //질문: 왜 *attname이 아닌가요? attname에 뭐가 들어가는지 확인하자. 
    printf_s("『공격력: %d』\n", att);
    printf_s("『남은 체력: %d』\n", hp); // att랑 hp는 레퍼런스로 사용했으니 그냥 쓰는건 알겠는데.. 일단 쭉 해보자. 
    printf_s("*--*--*--*--*--*--*--*--*--*\n");

}


int main()
{
    // 1. 제일 처음 필요한 변수들을 넣어줄거임. 
    int playeratt = 10;//pl의 공격력
    int playerhp = 100; //pl의 체력

    int monsteratt = 15; //몬스터 공격력
    int monsterhp = 110; //몬스터 체력

    // main에서 구현할 것: 함수 damage_print와 status_print을 사용해서, _getch() 클릭할때마다 반복되는(반복문), 
    // 그러나 어느 한 쪽의 hp가 0이 되면 멈추는 과정을 구현할거임(if문). 

    while (true) //조건식이 true일 경우에 계속해서 반복하는 문법
    {
        system("cls"); // 화면의 모든 글자 삭제 

        // 대미지와 스테이터스 중 무엇을 먼저 사용해야 할까?
        // 스테이터스가 상단에 오고, 그 아래 대미지를 출력할거니까 스테이터스 먼저. 
            // 플레이어 > 몬스터 순서대로 스테이터스를 띄울거임. 

        // a.스테이터스 출력 
        status_print("인간", playeratt, playerhp); // player(인간) 
        status_print("너구리", monsteratt, monsterhp); // monster(너구리) 
        _getch();


        // b.대미지 출력 (인간->너구리 공격 & 너구리->인간 공격) 
        // c.if문으로 어느 한 쪽의 hp가 0이 되었을때 출력. 
        damage_print("인간", "너구리", playeratt, monsterhp); // 인간이 너구리를 공격 
        _getch();

        if (monsterhp <= 0)
        {
            printf_s("너구리는 야생으로 돌아갔습니다.\n 인간의 승리입니다.");
            _getch();
            break;
        }

        damage_print("너구리", "인간", monsteratt, playerhp); // 너구리가 인간을 공격 
        _getch();


        if (playerhp <= 0)
        {
            printf_s("인간을 내쫓는데 성공했습니다.\n 너구리의 승리입니다.");
            _getch();
            break;
        }

    }

}

