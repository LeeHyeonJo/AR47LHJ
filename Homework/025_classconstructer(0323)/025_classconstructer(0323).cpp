// 025_classconstructer(0323).cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 클래스 생성자: 메모리를 생성하고 제어하는 법 
// 변수 초기화{리터럴 초기화, 멤버이니셜라이저}, 생성자의 특징, 멤버함수의 특징. 생성과 대입의 차이(중요)

// 복습할거: 이 모든 과정이 메모리에서 어떻게 처리되는지를 이해할것. 

#include <iostream>

class weapon
{
public:
    int att;

public:
    weapon();
    {

    }
};

class potion
{
public:
    int att;

public:
    potion();
    {

    }
};

class player
{
public:
    // 초기화 방식
    // 1: 리터럴 초기화 int hp =10; 이렇게 초기화하는 방법 
    // 바로 변수를 선언 후 동시에 초기화 하는 것. (안 쓰는 회사가 많을것)
    int hp = 10;
    int maxatt = 10;
    int minatt = 10;
    int pdef = 10;
    int mdef = 10;
    int crit = 10;

    weapon playerweapon = weapon();
    potion playerweapon = potion();

    // 리스트 이니셜라이저 문법 (이게 젤 마지막) 
    // player nplayer = player(20,30); <- 상단class 선언에서 ()안에 값 두개 들어갈 수 있거 바꿈 !! (int c1, int c2) 이렇게 
    // player nplayer = player{20, 30};
  


    // 클래스와 int를 동일하게 생각하라. 용도만 조금 다를뿐. 
    // potion playerweapon = potion();
    // int value = int(20); 
    // potion() 의 () 값 안에 int 처럼, 함수처럼 인자가 들어가지 못하는 건 내가
    // 포션 클래스를 짤때 ()안에 뭐가 들어간다고 선언해쥐 않아서!! 
    // -> 즉, 바꿔주면됨. 
    // int는 이미 완성된 자료형이므로 규칙이 있는거고, 클래스는 내가 만들어가는 규칙인거임
    // ===> 즉, 클래스가 내 마음대로 값이 안 들어가면 내가 클래스에 그 기능을 구현하지 않은 것. 

    // player 라는 클래스를 선언 시 () 내부에정수 들어갈 수 있게 기능을 잘 짜주면 이제 자료형 int와 동일 

    // int value =20
    //           =int(20); <- 이게 생략된 것 뿐임. 
    //            인트의 생성자가 호출되어서 정수를 받아주는 것임. 


    void testfuction() // 멤버함수 만들었엄 
    {
    
    }

public:
    // 생성자 특징: 꼭 이해해둘것 
    // 1.반드시 클래스의 이름과 동일해야함 (위에 있는 건 player 클래스이기 떄문)
    // 2.리턴값이 없다 -> 리턴값이 그 클래스의 객체이기 때문
    //  ㄴ 아무것도 없는 함수라도 앞에 void 라고 꼭 붙어있음. 
    //       그러나 생성자는 완전 예외인 함수. 
    // 3. 객체 없이 호출 가능하다: 일반적인 클래스의 함수는 무조건 객체를 필요로 함.
    //          객체를 만들어내야 하는 함수가 객체를 필요로 하면 모순이기 때문. 
    // 4. [멤버 이니셜라이저]라는 문법을 사용할 수 있음. 
    // 멤버 이니셜 라이저를 사용해서 변수를 초기화할 수 있다는 뜻. 
    // 그러나- [리티럴 초기화가 1순위, 멤버 이니셜 라이저 2순위]로 들어감. => 최종 반영값은 
    // player()
    // : hp(30),
    //   hp1(30),
    //   hp2(30),
    //   hp3(30),
    //   hp4(30) => hp 최종 값은 30
    // 형태 주의. 콜론 찍고 변수 이름(값) 이렇게 선언하는 방식임. 
    // 회사에선 자주 씀. 

    {
    // hp = 30; // 이렇게 초기화 한 후에들어가는게 대입 
    }


    player() // 앞에 리턴값으로 player가 붙어있음. 풀네임은  player() 
    {
    
    }




}

// 메모리 내에서 변수가 생성되는 순서.. 까지는 크게 안 중요함 (hp먼저일지, max일지)
// 확인할 수는 있음. 




int main()
{
    // 클래스를 만들었으나, 내가 정의하지 않은 행동을 했다면 - 컴파일러가그렇게 한 것. 
    // player nplayer 라고만 선언됐는데, player(); 가 붙은거 
    // 즉, 이런 경우는 눈에 보이지 않으나 존재한다고 생각해야 함. 
    player nplayer = player();
    // 객체: nplayer

    // 멤버함수는 반드시 객체(nplayer)를 필요로 한다.
    // 전역함수처럼 평범한 함수쓰듯이 (프린트f 처럼) 할 수없다. 

    nplayer.testfuction(); // 객체를 함께 사용한 상황 (위에서 멤버함수 선언했다고 가정..) 

    // player.testfuction(); <ㅡ 이거불가능. 



    //** 위 규칙의 예외가 딱 2가지 존재**//

    //1. 생성자 : 객체를 만들어내는 전역함수
    // 특징: 기본적으로 함수로 인식된다. 





}


