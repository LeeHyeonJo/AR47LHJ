// 0329 숙제: 0324 숙제 -> 0327(24숙제를 클래스로 구현) -> 0329(27숙제를 총알 1발 더 쏘는걸로 구현)  
// 이 기존 코드에 플러스로 구현할거임. 
// f키를 누르면 플레이어가 총알 "1발"을 발사한다. (ex. 가평으로 선언하면 선언할때마다 총알이 1개씩 더 생기는거임.) 
//											  // 즉, 1발만큼의 메모리만 쓰라는 뜻. (포인터,레퍼쓰는 이유가 이거임) 
// 띠띠띠띠.. 화면 끝까지 가면 소멸. 끝!! 
// 
// 총알 클래스를 만들고 쏘기. 
// 
// player가 어떻게 총알을 갖고 시작할것인가?
// 1. 플레이어가 총알 생성 
// 2. 플레이어가 이미 외부에 존재하는 총알을 조종. 
// 
// 특: 클래스는 최대한 서로를 모르면 좋다. 
// // 플레이어는 방아쇠를 당겼다는 개념만 알면 된다. 
// // 이것을 어떻게 구현할 것인가? (true/false)
// // ex. bool fire = false;
// // ex. bool fire = true; 
// >> 그리고 isfire 함수를 사용해서 t/f 받아와서 쏘면 됨. (이게 이상적인 방법) 
// 
// 
// 여유있으면 여러 해결책으로 해결해보셈. 
// 주요 객체는 항상 어느 메모리에 위치할지 꼭 그려볼것. ?? 이게 아예안되고잇음...!!
// ㄴㄴ 이거 진짜 자주 봐야겠음. 

//부록 <has a> 구조

// bullet newbullet : 플레이어가 몸 안에 총알 1발을 갖고 시작하는 느낌 (플레이어 생성 동시에 총알을 만듦), 선언될때마다 새롭게 생김. 
// bullet* newbullet : 외부에 잇는 총알을 조작함. / 포인터,레퍼는 총알의 조종간이라고 생각하셈. 


// *****컨,싶,a로 파일쪼개고 시작.*****
// *****진짜 쪼개는건 보고 따라해보기*****

// <구조 레벨의 의미> 
//:: 피라미드 꼴, 가장 위에 있는 레벨이0. 그 밑으로 내려갈수록 1, 2...  위치를 기준으로 높다(0), 낮다(100)로 서술함. 
		// 레벨이 높을수록 근본적인 클래스이다. 
			//ex. 화면이 높은 레벨0, 그 다음 낮은 레벨1이 플레이어 
			//ex. 레벨1의 콘솔게임 스크린은 화면을 의미함. 화면이 존재해야 플레이어가 존재하므로, 플레이어는 콘솔게임스크린보다 레벨이 낮아야 함. >>> 선생님 방식임 정석이 아님!! 
				// 레벨0의 헤더에선 그보다 낮은 레벨의 헤더1를 include/알면 안됨. (= 피라미드꼴에서 위에서 아래를 알면 안됨, 아래는 위를 알아도 됨) 

// 콘솔게임스크린을 헤더에 구현했을때, 생성자 프라이베이트로 1번만 사용될 수 있도록 막은 것
	// 이것을 "싱클톤 패턴" 이라고 부른다.
		// 패턴이란? => 클래스를 짤때 많이 사용되는 구조를 뜻함. 즉,클래스 간 관계나 구조를 짜는 방식이 비슷한 것을 모아 이름을 붙임. 
						// 이것을 디자인 패턴이라고 하는데 잘 안씀...!! 
						// 
	// 싱글톤 패턴: 생성자를 못 쓰게 막고, 개체를 static/전역으로 한개만 만들 수 잇게 고정(이 스타일 자체를 싱글톤 패턴) 


