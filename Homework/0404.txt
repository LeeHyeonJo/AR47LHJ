0403

// 0403 이한성 학생 해설 >> 코드비교해보면서 해석해보기. 
// 한칸 내려올 때, m이 벗어나는 현상
// >> 1. 내려왔을때 변수(bool downchecK) 하나 추가해서 update 함수를 멈추기 
// >> 2. 같은 칸 무한반복하는 현상: 좌,우를 동시에 체크할 필요없음. 내가 가는 방향만 체크해주면되는것을 기억. 

// 내리는 함수down 구현하는거 void down의 아이디어 잘 체크하기 & bool downcheck 잘 적절하게 넣어서 구현 
ㄴㄴ 이게 포인트였음. 

// 하나씩 쪼개서 구현하는걸 기억할것. 


// 이후 이어서 선생님 해설. (올라온 파일이 숙제 개변버전)
// 이거 구현할때 선생님 시험지 답지 꼭 따로 백업해서 기억해두기. 

-------------------------------------------------------------

0404

//////////////////////////////////////////////////////////////////////////////////////////
코드 스탠다드 추가: 다운 캐스팅 (자식 > 부모로 강제로 바꿔주기) 절대 하지 말것

1. 가상함수의 개념 및 원리 (원리에 함수 포인터,이중포인터 사용)
2. 업다운 캐스팅 (부모>자식 상속상속... )과 오버라이드있,없의 차이. 가상함수 테이블 체크해보기
3. 가상함수를 사용해서 0331 에서 몬스터가 죽은 후 깜빡깜빡하는걸 구현함. 
4. heap 힙에 대해서 간단하게 배움 (메모리 영역 복습 )
/////////////////////////////////////////////////////////////////////////////////////////


0331 폴더에서 이제 가상함수를 써볼거임. 

구현할 것: 몬스터가 안 움직이게 하고, 몬스터가 죽었을때 다른 글자 나오기 * 효과(한바퀴 돌기)로 구현할것
해결방식: 위치를 바꿔주는건 랜더함수. 랜더는 플레이어/몬스터 둘 다 사용중임. 그런데 몬스터만 다르게 움직여야하므로 - 
랜더에 가상함수를 걸어줘야함 


1. 죽었을때 다른 문자 나오게하기 (가상함수 활용)
몬스터 cpp. 
render에 오버라이드 걸어줌.. 인데!!
선언과 구현을 분리할 때는 오버라이드라고 쓰는 걸 생략해야 함. (원래 그럼)

	a.몬스터 랜더(가상함수) : if문으로 트루일때- 살아있을때는 원래 렌더 그대로. 
	else로 죽어있을땐 다른 문자를 출력하도록 구현 

2. 죽은 후 a 문자로 되돌아가게 하기. 
deathtime이라는 변수를하나 생성 우, if 조건에 넣어서 사용. 
deathtime이 0보다 작을땐 멀쩡. 1,2,3,4 (죽어잇는 시간) 동안 각각 다른 문자가 출력되게 변경

	

		// 여기까지가 추상화 1차 // 


3. 힙 메모리에 적절한 메모리를 할당

힙의 특징은 메모리를 내 원하는 만큼 사용할 수 있으므로, 
예시 슈팅겜에서는 갯수를 예측할 수 없는 몬스터, 총알이 적당함. 힙은 사용할때 포인터로 받아야 함. 

Monster* PtrMonster = new Monster();  // 이렇게 바꿔볼것 
new 자료형의 의미 힙에 만들어진 특정 번지의 메모리, 즉 주소값만을 줌.

그 다음 leak 이 남지 않도록 delete PtrMonster; 

단!! 강제종료되는 함수의 경우 어쩔 수 없이 leak이 남을 수도 있다. 

ㄴ 대부분의 게임은 힙을 자주 씀 
  ㄴ 200g짜리 게임이어도 메모리를 적게 먹을 수 있음: new stage1 로 구현 후, 스테이지가 넘어가면 힙에서 삭제. 그 다음 스테이지를 로드... 이런식이니까. 
	ㄴ 가평으로 만들면 메모리 못 지우??지??? 


	// 0405 heap 에 관련해서 더 깊게 들어감. 