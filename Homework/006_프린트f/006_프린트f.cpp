// 017_Printf.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{

    // 콘솔창에 글자를 띄운다.
    // printf_s("aaaaa");

    // 간단히 사용법 우선해서 훑어봄. 

    char Arr[4] = "123";

    // char arr[3] = "123";이 안 되는 이유! 접은 글 참고  

    /*char Arr[3] = "ab";
    printf_s(Arr);*/



    // "12345" 문자열 상수 표현식
    // 문자열 상수 표현식을 사용하면 무조건 마지막에 컴파일러가 알아서
    // 0을 붙이기 때문에 -> 포스트잇에 메모함 
    // char Arr[6] = "12345"/*0*/; 이런 형태가 된다. 
    // char Arr[5] = {'1', '2','3','4',0/*'5'*/};
                                        // ㄴ 다섯번째 요소로 컴파일러가 붙인 0이 있다는 뜻. 

    // 자료형이 다르기 때문에 오른쪽에서 왼쪽으로 들어가지 못한다.
    // char Value1 = Arr;


    // 인덱스(index)란? : 0부터 시작하는 인덱스(index)를 이용하면 각각의 배열 요소에 따로 접근할 수 있다
    // 배열의 개수를 샐때 0부터 세는것을 "제로베이스 기반 인덱스 표현"이라고 합니다. (메모리 주소가 0부터 시작하므로) 


    // char Arr[4] = "123";
    char Value1 = Arr[0]; // 1
    char Value2 = Arr[1]; // 2
    char Value3 = Arr[2]; // 3
    char Value4 = Arr[3]; // 여기에는 컴파일러가 부여한 0이 붙죠? 
    char Value5 = Arr[4]; // Arr에서 잘못된 데이터를 읽는다는 경고 (메모리에서 이상한 값 끌어옴) & 인덱스 범위를 벗어남 

    // printf_s(Arr); // 따라서 출력되는건 123 


    // 하나 더 연습해보자. char arr[5] = "1234" 로, 아마 오버플로우라고 뜰듯. 그리고 프린트f로 arr 출력해보기.  
    // 인덱스: 배열에서의 위치를 나타내는 숫자. 특정 요소에 개입하고 싶을 때 사용. 
    // 사용법: 변수선언 = 배열이름[인덱스숫자];
    char arr[5] = "5678";

    char x1 = arr[0]; //5 >>  int 로 x1을 받는다면, 문자 5가 있는 자리에 대응하는 정수가 들어감 
    char x2 = arr[1]; //6 >> 배열의 요소를 가져올때 배열의 자료형(char)과 다른 형태로 선언해도(int)
    char x3 = arr[2]; //7 >> 안되는건 아님. 근데 굳이 할 이유가 .. 
    char x4 = arr[3]; //8
    char x5 = arr[4]; // 컴파일러가 넣어준 0이 나옴

    // char 형 배열이므로 printf_s로 출력할 수 있음. 
    // printf_s(arr); //5678이 출력되겠네 

    // 일부만 뽑아서 출력하고 싶다면.. 

    printf_s("%c ", x1);
    printf_s("%c ", arr[0]); // 5, 됐다.. ㅜㅜ 


    // 제일 처음의 코드가 동작하지 않은 이유 
    //char arr[5] = "5678";
    //printf_s(arr[0]);

    // 첫째, printf_s 함수의 첫 번째 인자로는 출력할 문자열이나 포맷 문자열을 전달해야 합니다. 그러나 위의 코드에서는 arr[0] 하나만 전달하고 있습니다. 이 경우, printf_s 함수는 문자열의 끝을 알 수 없으므로 예기치 않은 동작을 할 가능성이 있습니다.

    // 둘째, arr[0]은 문자 타입(char)의 값이며, printf_s 함수의 첫 번째 인자로 전달하는 값은 포맷 문자열이나 출력할 문자열이어야 합니다.이 경우, % c 포맷 문자열을 사용하여 문자 타입의 값을 출력해야 합니다.

    // 따라서 printf_s 함수를 사용하여 arr[0]의 값을 출력하고자 한다면, 다음과 같이 코드를 수정해야 합니다.

    // char arr[5] = "5678";
    // printf_s("%c", arr[0]);

    // 요약: printf_s 함수는 문자'열'을 전달받아야하고, char은 문자 타입이다. 
    // arr[0]은 char인 문자 타입이므로, 이를 문자'열'로 변화해야할 필요성이 있다.
    // 그래서 %c 포맷 문자열을 사용해 문자 '타입'인 arr[0]을 문자'열'로 받아서 입력한 것이다. 

    bool arr1[3] = { true,false }; //인덱스는 0,1까지

    bool z1 = arr1[0];
    bool z2 = arr1[1];
    bool z3 = arr1[2]; // 여기부터 값이 멋대로 들어감~ 
    bool z4 = arr1[3];
    bool z5 = arr1[4];
    bool z6 = arr1[5];


}